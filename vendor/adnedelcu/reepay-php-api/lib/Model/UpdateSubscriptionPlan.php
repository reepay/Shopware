<?php
/**
 * UpdateSubscriptionPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;

/**
 * UpdateSubscriptionPlan Class Doc Comment
 *
 * @category    Class
 * @package     Reepay
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UpdateSubscriptionPlan implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'UpdateSubscriptionPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'description' => 'string',
        'vat' => 'float',
        'dunning_plan' => 'string',
        'renewal_reminder_email_days' => 'int',
        'trial_reminder_email_days' => 'int',
        'partial_period_handling' => 'string',
        'include_zero_amount' => 'bool',
        'setup_fee' => 'int',
        'setup_fee_text' => 'string',
        'setup_fee_handling' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'description' => null,
        'vat' => 'float',
        'dunning_plan' => null,
        'renewal_reminder_email_days' => 'int32',
        'trial_reminder_email_days' => 'int32',
        'partial_period_handling' => null,
        'include_zero_amount' => null,
        'setup_fee' => 'int32',
        'setup_fee_text' => null,
        'setup_fee_handling' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'vat' => 'vat',
        'dunning_plan' => 'dunning_plan',
        'renewal_reminder_email_days' => 'renewal_reminder_email_days',
        'trial_reminder_email_days' => 'trial_reminder_email_days',
        'partial_period_handling' => 'partial_period_handling',
        'include_zero_amount' => 'include_zero_amount',
        'setup_fee' => 'setup_fee',
        'setup_fee_text' => 'setup_fee_text',
        'setup_fee_handling' => 'setup_fee_handling'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'vat' => 'setVat',
        'dunning_plan' => 'setDunningPlan',
        'renewal_reminder_email_days' => 'setRenewalReminderEmailDays',
        'trial_reminder_email_days' => 'setTrialReminderEmailDays',
        'partial_period_handling' => 'setPartialPeriodHandling',
        'include_zero_amount' => 'setIncludeZeroAmount',
        'setup_fee' => 'setSetupFee',
        'setup_fee_text' => 'setSetupFeeText',
        'setup_fee_handling' => 'setSetupFeeHandling'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'vat' => 'getVat',
        'dunning_plan' => 'getDunningPlan',
        'renewal_reminder_email_days' => 'getRenewalReminderEmailDays',
        'trial_reminder_email_days' => 'getTrialReminderEmailDays',
        'partial_period_handling' => 'getPartialPeriodHandling',
        'include_zero_amount' => 'getIncludeZeroAmount',
        'setup_fee' => 'getSetupFee',
        'setup_fee_text' => 'getSetupFeeText',
        'setup_fee_handling' => 'getSetupFeeHandling'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PARTIAL_PERIOD_HANDLING_BILL_FULL = 'bill_full';
    const PARTIAL_PERIOD_HANDLING_BILL_PRORATED = 'bill_prorated';
    const PARTIAL_PERIOD_HANDLING_BILL_ZERO_AMOUNT = 'bill_zero_amount';
    const PARTIAL_PERIOD_HANDLING_NO_BILL = 'no_bill';



    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPartialPeriodHandlingAllowableValues()
    {
        return [
            self::PARTIAL_PERIOD_HANDLING_BILL_FULL,
            self::PARTIAL_PERIOD_HANDLING_BILL_PRORATED,
            self::PARTIAL_PERIOD_HANDLING_BILL_ZERO_AMOUNT,
            self::PARTIAL_PERIOD_HANDLING_NO_BILL,
        ];
    }


    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['dunning_plan'] = isset($data['dunning_plan']) ? $data['dunning_plan'] : null;
        $this->container['renewal_reminder_email_days'] = isset($data['renewal_reminder_email_days']) ? $data['renewal_reminder_email_days'] : null;
        $this->container['trial_reminder_email_days'] = isset($data['trial_reminder_email_days']) ? $data['trial_reminder_email_days'] : null;
        $this->container['partial_period_handling'] = isset($data['partial_period_handling']) ? $data['partial_period_handling'] : null;
        $this->container['include_zero_amount'] = isset($data['include_zero_amount']) ? $data['include_zero_amount'] : null;
        $this->container['setup_fee'] = isset($data['setup_fee']) ? $data['setup_fee'] : null;
        $this->container['setup_fee_text'] = isset($data['setup_fee_text']) ? $data['setup_fee_text'] : null;
        $this->container['setup_fee_handling'] = isset($data['setup_fee_handling']) ? $data['setup_fee_handling'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if (!is_null($this->container['vat']) && ($this->container['vat'] > 1)) {
            $invalid_properties[] = "invalid value for 'vat', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['vat']) && ($this->container['vat'] < 0)) {
            $invalid_properties[] = "invalid value for 'vat', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['renewal_reminder_email_days']) && ($this->container['renewal_reminder_email_days'] < 1)) {
            $invalid_properties[] = "invalid value for 'renewal_reminder_email_days', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['trial_reminder_email_days']) && ($this->container['trial_reminder_email_days'] < 1)) {
            $invalid_properties[] = "invalid value for 'trial_reminder_email_days', must be bigger than or equal to 1.";
        }

        $allowed_values = $this->getPartialPeriodHandlingAllowableValues();
        if (!in_array($this->container['partial_period_handling'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'partial_period_handling', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if (!is_null($this->container['setup_fee']) && ($this->container['setup_fee'] < 0)) {
            $invalid_properties[] = "invalid value for 'setup_fee', must be bigger than or equal to 0.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['vat'] > 1) {
            return false;
        }
        if ($this->container['vat'] < 0) {
            return false;
        }
        if ($this->container['renewal_reminder_email_days'] < 1) {
            return false;
        }
        if ($this->container['trial_reminder_email_days'] < 1) {
            return false;
        }
        $allowed_values = $this->getPartialPeriodHandlingAllowableValues();
        if (!in_array($this->container['partial_period_handling'], $allowed_values)) {
            return false;
        }
        if ($this->container['setup_fee'] < 0) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of the plan
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Description of the plan
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets vat
     * @return float
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     * @param float $vat Optional vat for this plan. Account default is used if none given.
     * @return $this
     */
    public function setVat($vat)
    {

        if (!is_null($vat) && ($vat > 1)) {
            throw new \InvalidArgumentException('invalid value for $vat when calling UpdateSubscriptionPlan., must be smaller than or equal to 1.');
        }
        if (!is_null($vat) && ($vat < 0)) {
            throw new \InvalidArgumentException('invalid value for $vat when calling UpdateSubscriptionPlan., must be bigger than or equal to 0.');
        }

        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets dunning_plan
     * @return string
     */
    public function getDunningPlan()
    {
        return $this->container['dunning_plan'];
    }

    /**
     * Sets dunning_plan
     * @param string $dunning_plan Dunning plan handle
     * @return $this
     */
    public function setDunningPlan($dunning_plan)
    {
        $this->container['dunning_plan'] = $dunning_plan;

        return $this;
    }

    /**
     * Gets renewal_reminder_email_days
     * @return int
     */
    public function getRenewalReminderEmailDays()
    {
        return $this->container['renewal_reminder_email_days'];
    }

    /**
     * Sets renewal_reminder_email_days
     * @param int $renewal_reminder_email_days Optional renewal reminder email settings. Number of days before next billing to send a reminder email.
     * @return $this
     */
    public function setRenewalReminderEmailDays($renewal_reminder_email_days)
    {

        if (!is_null($renewal_reminder_email_days) && ($renewal_reminder_email_days < 1)) {
            throw new \InvalidArgumentException('invalid value for $renewal_reminder_email_days when calling UpdateSubscriptionPlan., must be bigger than or equal to 1.');
        }

        $this->container['renewal_reminder_email_days'] = $renewal_reminder_email_days;

        return $this;
    }

    /**
     * Gets trial_reminder_email_days
     * @return int
     */
    public function getTrialReminderEmailDays()
    {
        return $this->container['trial_reminder_email_days'];
    }

    /**
     * Sets trial_reminder_email_days
     * @param int $trial_reminder_email_days Optional end of trial reminder email settings. Number of days before end of trial to send a reminder email.
     * @return $this
     */
    public function setTrialReminderEmailDays($trial_reminder_email_days)
    {

        if (!is_null($trial_reminder_email_days) && ($trial_reminder_email_days < 1)) {
            throw new \InvalidArgumentException('invalid value for $trial_reminder_email_days when calling UpdateSubscriptionPlan., must be bigger than or equal to 1.');
        }

        $this->container['trial_reminder_email_days'] = $trial_reminder_email_days;

        return $this;
    }

    /**
     * Gets partial_period_handling
     * @return string
     */
    public function getPartialPeriodHandling()
    {
        return $this->container['partial_period_handling'];
    }

    /**
     * Sets partial_period_handling
     * @param string $partial_period_handling How to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amoumt, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.
     * @return $this
     */
    public function setPartialPeriodHandling($partial_period_handling)
    {
        $allowed_values = $this->getPartialPeriodHandlingAllowableValues();
        if (!is_null($partial_period_handling) && !in_array($partial_period_handling, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'partial_period_handling', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['partial_period_handling'] = $partial_period_handling;

        return $this;
    }

    /**
     * Gets include_zero_amount
     * @return bool
     */
    public function getIncludeZeroAmount()
    {
        return $this->container['include_zero_amount'];
    }

    /**
     * Sets include_zero_amount
     * @param bool $include_zero_amount Whether to add a zero amount order line to subscription invoices if plan amount is zero or the subscription overrides to zero amount. The default is to not include the line. If no other order lines are present the plan order line will be added.
     * @return $this
     */
    public function setIncludeZeroAmount($include_zero_amount)
    {
        $this->container['include_zero_amount'] = $include_zero_amount;

        return $this;
    }

    /**
     * Gets setup_fee
     * @return int
     */
    public function getSetupFee()
    {
        return $this->container['setup_fee'];
    }

    /**
     * Sets setup_fee
     * @param int $setup_fee Optional one-time setup fee billed with the first invoice or as a separate invoice depending on the setting `setup_fee_invoice`.
     * @return $this
     */
    public function setSetupFee($setup_fee)
    {

        if (!is_null($setup_fee) && ($setup_fee < 0)) {
            throw new \InvalidArgumentException('invalid value for $setup_fee when calling UpdateSubscriptionPlan., must be bigger than or equal to 0.');
        }

        $this->container['setup_fee'] = $setup_fee;

        return $this;
    }

    /**
     * Gets setup_fee_text
     * @return string
     */
    public function getSetupFeeText()
    {
        return $this->container['setup_fee_text'];
    }

    /**
     * Sets setup_fee_text
     * @param string $setup_fee_text Optional invoice order text for the setup fee that
     * @return $this
     */
    public function setSetupFeeText($setup_fee_text)
    {
        $this->container['setup_fee_text'] = $setup_fee_text;

        return $this;
    }

    /**
     * Gets setup_fee_handling
     * @return string
     */
    public function getSetupFeeHandling()
    {
        return $this->container['setup_fee_handling'];
    }

    /**
     * Sets setup_fee_handling
     * @param string $setup_fee_handling How the billing of the setup fee should be done. The options are: `first` - include setup fee as order line on the first scheduled invoice. `separate` - create a separate invoice for the setup fee, is appropriate if first invoice is not in conjunction with creation. `separate_conditional` - create a separate invoice for setup fee if the first invoice is not created in conjunction with the creation. Default is `first`.
     * @return $this
     */
    public function setSetupFeeHandling($setup_fee_handling)
    {
        $this->container['setup_fee_handling'] = $setup_fee_handling;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Reepay\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Reepay\ObjectSerializer::sanitizeForSerialization($this));
    }
}


